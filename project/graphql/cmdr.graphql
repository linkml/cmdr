type Container
  {
    materials: [MaterialEntity]
    participations: [Participation]
    processes: [Process]
    investigations: [Investigation]
    subjects: [Subject]
  }

type Investigation
  {
    id: Uriorcurie!
    name: String
    partOf: Investigation
  }

type MaterialEntity
  {
    id: Uriorcurie!
    name: String
    usedIn: [Investigation]
    source: Subject
    volume: Quantity
    concentration: Quantity
  }

type MaterialProcessing
  {
    id: Uriorcurie!
    hasInput: [MaterialEntity]
    hasOutput: [MaterialEntity]
  }

type Participation
  {
    includes: Subject
    id: Uriorcurie!
    name: String
    involvedIn: [Investigation]
  }

interface Process
  {
    id: Uriorcurie!
  }

type Quantity
  {
    hasRawValue: String
    hasNumericValue: Float
    hasUnit: String
    comparator: String
  }

type QuantityValue
  {
  }

type SpecimenCollectionProcess
  {
    id: Uriorcurie!
    hasInput: [MaterialEntity]
    hasOutput: [MaterialEntity]
  }

type Subject
  {
    id: Uriorcurie!
    name: String
  }

